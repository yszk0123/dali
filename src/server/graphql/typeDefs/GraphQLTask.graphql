type Task {
  id: ID!
  owner: User!
  title: String!
  description: String
  done: Boolean
  phase: Phase
  timeUnit: TimeUnit
  assignee: User
}

enum TaskOrderField {
  TITLE
  PRIORITY
  CREATED_AT
  UPDATED_AT
}

input TaskOrder {
  field: TaskOrderField!
  direction: OrderDirection!
}

type RemoveTaskPayload {
  removedTaskId: ID
}

type AddTaskToPhasePayload {
  task: Task
  phase: Phase
}

type Query {
  tasks(
    done: Boolean
    phaseId: ID
    timeUnitId: ID
    limit: ListLimit
    offset: ListOffset
    orderBy: TaskOrder
  ): [Task]
}

type Mutation {
  createTask(
    title: String!
    description: String
    done: Boolean
    phaseId: ID
    timeUnitId: ID
  ): Task
  updateTask(
    taskId: ID!
    title: String
    description: String
    done: Boolean
    phaseId: ID
    timeUnitId: ID
  ): Task
  removeTask(taskId: ID!): RemoveTaskPayload
  addTaskToPhase(taskId: ID!, phaseId: ID!): AddTaskToPhasePayload
}
