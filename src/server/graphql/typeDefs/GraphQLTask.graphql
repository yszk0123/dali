type Task {
  id: ID!
  owner: User!
  title: String!
  description: String
  done: Boolean!
  project: Project
  actions(used: Boolean, done: Boolean): [Action]
  assignee: User
}

enum TaskOrderField {
  TITLE
  CREATED_AT
  UPDATED_AT
}

input TaskOrder {
  field: TaskOrderField!
  direction: OrderDirection!
}

type Query {
  tasks(
    groupId: ID
    projectId: ID
    done: Boolean
    limit: ListLimit
    offset: ListOffset
    orderBy: TaskOrder
  ): [Task]
}

type RemoveTaskPayload {
  removedTaskId: ID
}

type MoveActionToTaskPayload {
  action: Action
  sourceTask: Task
  targetTask: Task
}

type Mutation {
  createTask(
    title: String
    description: String
    done: Boolean
    projectId: ID
  ): Task
  updateTask(
    taskId: ID!
    title: String
    description: String
    done: Boolean
    projectId: ID
  ): Task
  removeTask(taskId: ID!): RemoveTaskPayload
  moveActionToTask(actionId: ID!, taskId: ID!): MoveActionToTaskPayload
  setProjectToTask(taskId: ID!, projectId: ID!): Task
}
