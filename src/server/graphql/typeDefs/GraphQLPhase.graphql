type Phase {
  id: ID!
  owner: User!
  title: String!
  description: String
  done: Boolean!
  project: Project
  tasks(used: Boolean, done: Boolean): [Task]
}

enum PhaseOrderField {
  TITLE
  CREATED_AT
  UPDATED_AT
}

input PhaseOrder {
  field: PhaseOrderField!
  direction: OrderDirection!
}

type Query {
  phases(
    projectId: ID
    done: Boolean
    limit: ListLimit
    offset: ListOffset
    orderBy: PhaseOrder
  ): [Phase]
}

type RemovePhasePayload {
  removedPhaseId: ID
}

type MoveTaskToPhasePayload {
  task: Task
  sourcePhase: Phase
  targetPhase: Phase
}

type Mutation {
  createPhase(
    title: String
    description: String
    done: Boolean
    projectId: ID
  ): Phase
  updatePhase(
    phaseId: ID!
    title: String
    description: String
    done: Boolean
    projectId: ID
  ): Phase
  removePhase(phaseId: ID!): RemovePhasePayload
  moveTaskToPhase(taskId: ID!, phaseId: ID!): MoveTaskToPhasePayload
  setProjectToPhase(phaseId: ID!, projectId: ID!): Phase
}
