type TimeUnit {
  id: ID!
  owner: User!
  description: String
  date: DateOnly!
  position: Int
  tasks: [Task]
}

type RemoveTimeUnitPayload {
  removedTimeUnitId: ID
}

type MoveTaskToTimeUnitPayload {
  task: Task
  sourceTimeUnit: TimeUnit
  targetTimeUnit: TimeUnit
}

enum TimeUnitOrderField {
  DATE
  POSITION
}

input TimeUnitOrder {
  field: TimeUnitOrderField!
  direction: OrderDirection!
}

type Query {
  timeUnits(
    date: DateOnly
    after: DateOnly
    before: DateOnly
    limit: ListLimit
    offset: ListOffset
    order: TimeUnitOrder
  ): [TimeUnit]
}

type Mutation {
  createTimeUnit(description: String, date: DateOnly!, position: Int): TimeUnit
  updateTimeUnit(
    timeUnitId: ID!
    description: String
    date: DateOnly
    position: Int
  ): TimeUnit
  moveTaskToTimeUnit(taskId: ID!, timeUnitId: ID!): MoveTaskToTimeUnitPayload
  removeTimeUnit(timeUnitId: ID!): RemoveTimeUnitPayload
}
