type AddTaskGroupToProjectPayload {
  taskGroup: TaskGroup
  project: Project
}

type AddTaskToTaskGroupPayload {
  task: Task
  taskGroup: TaskGroup
}

enum Authority {
  OWNER
  EDITABLE
  READONLY
}

scalar Date

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# An Int representing how many items to fetch in a List
scalar ListLimit

# An Int representing from which item index to start fetching a List
scalar ListOffset

# A String representing desired order based on a field supports formats like: "name", "reverse:name"
scalar ListOrder

# A JSON object conforming to the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
scalar ListWhere

type Member {
  id: ID!
  authority: Authority
}

type MoveTaskToTaskGroupPayload {
  task: Task
  sourceTaskGroup: TaskGroup
  targetTaskGroup: TaskGroup
}

type Mutation {
  createProject(title: String!): Project
  updateProject(projectId: ID!, title: String!): Project
  removeProject(projectId: ID!): RemoveProjectPayload
  createTask(title: String!, taskGroupId: ID, timeUnitId: ID): Task
  updateTask(taskId: ID!, taskGroupId: ID, timeUnitId: ID): Task
  removeTask(taskId: ID!): RemoveTaskPayload
  addTaskToTaskGroup(taskId: ID!, taskGroupId: ID!): AddTaskToTaskGroupPayload
  createTaskGroup(title: String, description: String, done: Boolean, projectId: ID): TaskGroup
  updateTaskGroup(taskGroupId: ID!, title: String, description: String, done: Boolean, projectId: ID): TaskGroup
  removeTaskGroup(taskGroupId: ID!): RemoveTaskGroupPayload
  moveTaskToTaskGroup(taskId: ID!, taskGroupId: ID!): MoveTaskToTaskGroupPayload
  addTaskGroupToProject(taskGroupId: ID!, projectId: ID!): AddTaskGroupToProjectPayload
  createTimeUnit(description: String, wholeDay: Boolean, startAt: Date, endAt: Date): TimeUnit
  updateTimeUnit(id: ID!, description: String, wholeDay: Boolean, startAt: Date, endAt: Date): TimeUnit
  removeTimeUnit(id: ID!): RemoveTimeUnitPayload
  signup(email: String!, password: String!, nickname: String!, firstName: String, lastName: String): User
  login(email: String!, password: String!): User
  logout: User
}

enum OrderDirection {
  ASC
  DESC
}

type Project {
  id: ID!
  title: String!
  description: String
  owner: User!
  visibility: ProjectVisibility
  members: [Member]
  taskGroups: [TaskGroup]
}

input ProjectOrder {
  field: ProjectOrderField!
  direction: OrderDirection!
}

enum ProjectOrderField {
  TITLE
  CREATED_AT
  UPDATED_AT
}

enum ProjectVisibility {
  PRIVATE
  MEMBER
  PUBLIC
}

type Query {
  members(limit: ListLimit, offset: ListOffset, order: ListOrder): [Member]
  projects(limit: ListLimit, offset: ListOffset, orderBy: ProjectOrder): [Project]
  tasks(done: Boolean, taskGroupId: ID, timeUnitId: ID, limit: ListLimit, offset: ListOffset, orderBy: TaskOrder): [Task]
  taskGroups(projectId: ID, limit: ListLimit, offset: ListOffset, orderBy: ListOrder): [TaskGroup]
  timeUnits(after: Date, before: Date, limit: ListLimit, offset: ListOffset, order: TimeUnitOrder): [TimeUnit]
  currentUser: User
}

type RemoveProjectPayload {
  removedProjectId: ID!
}

type RemoveTaskGroupPayload {
  removedTaskGroupId: ID
}

type RemoveTaskPayload {
  removedTaskId: ID
}

type RemoveTimeUnitPayload {
  removedTimeUnitId: ID
}

type Task {
  id: ID!
  owner: User!
  title: String!
  description: String
  done: Boolean
  taskGroup: TaskGroup
  timeUnit: TimeUnit
  assignee: User
}

type TaskGroup {
  id: ID!
  owner: User!
  title: String!
  description: String
  done: Boolean
  project: Project
  tasks: [Task]
}

input TaskOrder {
  field: TaskOrderField!
  direction: OrderDirection!
}

enum TaskOrderField {
  TITLE
  PRIORITY
  CREATED_AT
  UPDATED_AT
}

type TimeUnit {
  id: ID!
  owner: User!
  description: String
  wholeDay: Boolean
  startAt: Date
  endAt: Date
  tasks: [Task]
}

input TimeUnitOrder {
  field: TimeUnitOrderField!
  direction: OrderDirection!
}

enum TimeUnitOrderField {
  DATE
  TITLE
}

type User {
  id: ID!
  email: String!
  password: String!
  nickname: String!
  firstName: String
  lastName: String
  projects: [Project]
}
