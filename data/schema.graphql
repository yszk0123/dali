input AddTaskUnitInput {
  clientMutationId: String
}

type AddTaskUnitPayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

input AddTimeUnitInput {
  title: String!
  clientMutationId: String
}

type AddTimeUnitPayload {
  timeUnitEdge: TimeUnitEdge
  viewer: User
  clientMutationId: String
}

input CreateDailyReportInput {
  clientMutationId: String
}

type CreateDailyReportPayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

input CreateDailyReportTemplateInput {
  clientMutationId: String
}

type CreateDailyReportTemplatePayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

input CreateProjectInput {
  clientMutationId: String
}

type CreateProjectPayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

input CreateTaskUnitInput {
  clientMutationId: String
}

type CreateTaskUnitPayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

input CreateTimeUnitInput {
  clientMutationId: String
}

type CreateTimeUnitPayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

type Mutation {
  addTaskUnit(input: AddTaskUnitInput!): AddTaskUnitPayload
  createDailyReport(input: CreateDailyReportInput!): CreateDailyReportPayload
  createDailyReportTemplate(input: CreateDailyReportTemplateInput!): CreateDailyReportTemplatePayload
  createProject(input: CreateProjectInput!): CreateProjectPayload
  createTaskUnit(input: CreateTaskUnitInput!): CreateTaskUnitPayload
  createTimeUnit(input: CreateTimeUnitInput!): CreateTimeUnitPayload
  removeDailyReport(input: RemoveDailyReportInput!): RemoveDailyReportPayload
  removeDailyReportTemplate(input: RemoveDailyReportTemplateInput!): RemoveDailyReportTemplatePayload
  removeProject(input: RemoveProjectInput!): RemoveProjectPayload
  removeTaskUnit(input: RemoveTaskUnitInput!): RemoveTaskUnitPayload
  removeTimeUnit(input: RemoveTimeUnitInput!): RemoveTimeUnitPayload
  updateDailyReport(input: UpdateDailyReportInput!): UpdateDailyReportPayload
  updateDailyReportTemplate(input: UpdateDailyReportTemplateInput!): UpdateDailyReportTemplatePayload
  updateProject(input: UpdateProjectInput!): UpdateProjectPayload
  updateTaskUnit(input: UpdateTaskUnitInput!): UpdateTaskUnitPayload
  updateTimeUnit(input: UpdateTimeUnitInput!): UpdateTimeUnitPayload
  addTimeUnit(input: AddTimeUnitInput!): AddTimeUnitPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Project {
  # The ID of an object
  id: ID!
  title: String
}

# A connection to a list of items.
type ProjectConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ProjectEdge]
}

# An edge in a connection.
type ProjectEdge {
  # The item at the end of the edge
  node: Project

  # A cursor for use in pagination
  cursor: String!
}

type Query {
  viewer: User

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input RemoveDailyReportInput {
  clientMutationId: String
}

type RemoveDailyReportPayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

input RemoveDailyReportTemplateInput {
  clientMutationId: String
}

type RemoveDailyReportTemplatePayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

input RemoveProjectInput {
  clientMutationId: String
}

type RemoveProjectPayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

input RemoveTaskUnitInput {
  clientMutationId: String
}

type RemoveTaskUnitPayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

input RemoveTimeUnitInput {
  clientMutationId: String
}

type RemoveTimeUnitPayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

type TaskUnit {
  # The ID of an object
  id: ID!
  title: String
}

# A connection to a list of items.
type TaskUnitConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TaskUnitEdge]
}

# An edge in a connection.
type TaskUnitEdge {
  # The item at the end of the edge
  node: TaskUnit

  # A cursor for use in pagination
  cursor: String!
}

type TimeUnit {
  # The ID of an object
  id: ID!
  title: String
}

# A connection to a list of items.
type TimeUnitConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TimeUnitEdge]
}

# An edge in a connection.
type TimeUnitEdge {
  # The item at the end of the edge
  node: TimeUnit

  # A cursor for use in pagination
  cursor: String!
}

input UpdateDailyReportInput {
  clientMutationId: String
}

type UpdateDailyReportPayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

input UpdateDailyReportTemplateInput {
  clientMutationId: String
}

type UpdateDailyReportTemplatePayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

input UpdateProjectInput {
  clientMutationId: String
}

type UpdateProjectPayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

input UpdateTaskUnitInput {
  clientMutationId: String
}

type UpdateTaskUnitPayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

input UpdateTimeUnitInput {
  clientMutationId: String
}

type UpdateTimeUnitPayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

type User implements Node {
  # The ID of an object
  id: ID!
  name: String
  projects(after: String, first: Int, before: String, last: Int): ProjectConnection
  timeUnits(after: String, first: Int, before: String, last: Int): TimeUnitConnection
  taskUnits(after: String, first: Int, before: String, last: Int): TaskUnitConnection
}
