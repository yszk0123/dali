type Action {
  id: ID!
  owner: User!
  title: String!
  description: String
  done: Boolean!
  task: Task
  period: Period
}

input ActionOrder {
  field: ActionOrderField!
  direction: OrderDirection!
}

enum ActionOrderField {
  TITLE
  PRIORITY
  CREATED_AT
  UPDATED_AT
}

enum Authority {
  OWNER
  EDITABLE
  READONLY
}

scalar Date

scalar DateOnly

type Group {
  id: ID!
  title: String!
  owner: User!
  projects(projectId: ID, done: Boolean, limit: ListLimit, offset: ListOffset, orderBy: TaskOrder): [Project]
}

input GroupOrder {
  field: GroupOrderField!
  direction: OrderDirection!
}

enum GroupOrderField {
  TITLE
  CREATED_AT
  UPDATED_AT
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# An Int representing how many items to fetch in a List
scalar ListLimit

# An Int representing from which item index to start fetching a List
scalar ListOffset

# A String representing desired order based on a field supports formats like: "name", "reverse:name"
scalar ListOrder

# A JSON object conforming to the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
scalar ListWhere

type Member {
  id: ID!
  authority: Authority!
}

type MoveActionToPeriodPayload {
  action: Action
  sourcePeriod: Period
  targetPeriod: Period
}

type MoveActionToTaskPayload {
  action: Action
  sourceTask: Task
  targetTask: Task
}

type Mutation {
  createAction(title: String!, description: String, done: Boolean, taskId: ID, periodId: ID): Action
  updateAction(actionId: ID!, title: String, description: String, done: Boolean, taskId: ID, periodId: ID): Action
  removeAction(actionId: ID!): RemoveActionPayload
  setTaskToAction(taskId: ID!, actionId: ID!): Action
  setPeriodToAction(periodId: ID!, actionId: ID!): Action
  setOrCreatePeriodToAction(date: DateOnly!, position: Int, actionId: ID!): Action
  createGroup(title: String!, done: Boolean, groupId: ID): Group
  updateGroup(groupId: ID, title: String!, done: Boolean): Group
  removeGroup(groupId: ID!): RemoveGroupPayload
  addProjectToGroup(projectId: ID!, groupId: ID!): Group
  createPeriod(description: String, date: DateOnly!, position: Int): Period
  updatePeriod(periodId: ID!, description: String, date: DateOnly, position: Int): Period
  moveActionToPeriod(actionId: ID!, periodId: ID!): MoveActionToPeriodPayload
  removePeriod(periodId: ID!): RemovePeriodPayload
  createProject(title: String!, done: Boolean, groupId: ID): Project
  updateProject(projectId: ID!, title: String, done: Boolean, groupId: ID): Project
  removeProject(projectId: ID!): RemoveProjectPayload
  addTaskToProject(taskId: ID!, projectId: ID!): Project
  setGroupToProject(groupId: ID!, projectId: ID!): Project
  createTask(title: String, description: String, done: Boolean, projectId: ID): Task
  updateTask(taskId: ID!, title: String, description: String, done: Boolean, projectId: ID): Task
  removeTask(taskId: ID!): RemoveTaskPayload
  moveActionToTask(actionId: ID!, taskId: ID!): MoveActionToTaskPayload
  setProjectToTask(taskId: ID!, projectId: ID!): Task
  signup(email: String!, password: String!, nickname: String!, firstName: String, lastName: String): User
  login(email: String!, password: String!): User
  logout: User
}

enum OrderDirection {
  ASC
  DESC
}

type Period {
  id: ID!
  owner: User!
  description: String
  date: DateOnly!
  position: Int
  actions: [Action]
}

input PeriodOrder {
  field: PeriodOrderField!
  direction: OrderDirection!
}

enum PeriodOrderField {
  DATE
  POSITION
}

type Project {
  id: ID!
  title: String!
  description: String
  done: Boolean!
  owner: User!
  group: Group
  visibility: ProjectVisibility!
  members: [Member]
  tasks(projectId: ID, done: Boolean, limit: ListLimit, offset: ListOffset, orderBy: TaskOrder): [Task]
}

input ProjectOrder {
  field: ProjectOrderField!
  direction: OrderDirection!
}

enum ProjectOrderField {
  TITLE
  CREATED_AT
  UPDATED_AT
}

enum ProjectVisibility {
  PRIVATE
  MEMBER
  PUBLIC
}

type Query {
  action(id: ID!): Action
  actions(done: Boolean, used: Boolean, taskId: ID, periodId: ID, limit: ListLimit, offset: ListOffset, orderBy: ActionOrder): [Action]
  group(id: ID): Group
  groups(id: ID, limit: ListLimit, offset: ListOffset, orderBy: ProjectOrder): [Group]
  members(limit: ListLimit, offset: ListOffset, order: ListOrder): [Member]
  periods(date: DateOnly, after: DateOnly, before: DateOnly, limit: ListLimit, offset: ListOffset, order: PeriodOrder): [Period]
  projects(groupId: ID, done: Boolean, limit: ListLimit, offset: ListOffset, orderBy: ProjectOrder): [Project]
  tasks(groupId: ID, projectId: ID, done: Boolean, limit: ListLimit, offset: ListOffset, orderBy: TaskOrder): [Task]
  currentUser: User
}

type RemoveActionPayload {
  removedActionId: ID
}

type RemoveGroupPayload {
  removedGroupId: ID!
}

type RemovePeriodPayload {
  removedPeriodId: ID
}

type RemoveProjectPayload {
  removedProjectId: ID!
}

type RemoveTaskPayload {
  removedTaskId: ID
}

type Task {
  id: ID!
  owner: User!
  title: String!
  description: String
  done: Boolean!
  project: Project
  actions(used: Boolean, done: Boolean): [Action]
  assignee: User
}

input TaskOrder {
  field: TaskOrderField!
  direction: OrderDirection!
}

enum TaskOrderField {
  TITLE
  CREATED_AT
  UPDATED_AT
}

type User {
  id: ID!
  email: String!
  password: String!
  nickname: String!
  firstName: String
  lastName: String
  projects: [Project]
}
