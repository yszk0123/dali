type AddTaskToPhasePayload {
  task: Task
  phase: Phase
}

enum Authority {
  OWNER
  EDITABLE
  READONLY
}

scalar Date

scalar DateOnly

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# An Int representing how many items to fetch in a List
scalar ListLimit

# An Int representing from which item index to start fetching a List
scalar ListOffset

# A String representing desired order based on a field supports formats like: "name", "reverse:name"
scalar ListOrder

# A JSON object conforming to the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
scalar ListWhere

type Member {
  id: ID!
  authority: Authority!
}

type MoveTaskToPhasePayload {
  task: Task
  sourcePhase: Phase
  targetPhase: Phase
}

type Mutation {
  createPhase(title: String, description: String, done: Boolean, projectId: ID): Phase
  updatePhase(phaseId: ID!, title: String, description: String, done: Boolean, projectId: ID): Phase
  removePhase(phaseId: ID!): RemovePhasePayload
  moveTaskToPhase(taskId: ID!, phaseId: ID!): MoveTaskToPhasePayload
  setProjectToPhase(phaseId: ID!, projectId: ID!): Phase
  createProject(title: String!): Project
  updateProject(projectId: ID!, title: String!): Project
  removeProject(projectId: ID!): RemoveProjectPayload
  addPhaseToProject(phaseId: ID!, projectId: ID!): Project
  createTask(title: String!, description: String, done: Boolean, phaseId: ID, timeUnitId: ID): Task
  updateTask(taskId: ID!, title: String, description: String, done: Boolean, phaseId: ID, timeUnitId: ID): Task
  removeTask(taskId: ID!): RemoveTaskPayload
  addTaskToPhase(taskId: ID!, phaseId: ID!): AddTaskToPhasePayload
  createTimeUnit(description: String, date: DateOnly!, position: Int): TimeUnit
  updateTimeUnit(timeUnitId: ID!, description: String, date: DateOnly, position: Int): TimeUnit
  removeTimeUnit(timeUnitId: ID!): RemoveTimeUnitPayload
  signup(email: String!, password: String!, nickname: String!, firstName: String, lastName: String): User
  login(email: String!, password: String!): User
  logout: User
}

enum OrderDirection {
  ASC
  DESC
}

type Phase {
  id: ID!
  owner: User!
  title: String!
  description: String
  done: Boolean!
  project: Project
  tasks: [Task]
}

type Project {
  id: ID!
  title: String!
  description: String
  owner: User!
  visibility: ProjectVisibility!
  members: [Member]
  phases: [Phase]
}

input ProjectOrder {
  field: ProjectOrderField!
  direction: OrderDirection!
}

enum ProjectOrderField {
  TITLE
  CREATED_AT
  UPDATED_AT
}

enum ProjectVisibility {
  PRIVATE
  MEMBER
  PUBLIC
}

type Query {
  members(limit: ListLimit, offset: ListOffset, order: ListOrder): [Member]
  phases(projectId: ID, done: Boolean, limit: ListLimit, offset: ListOffset, orderBy: ListOrder): [Phase]
  projects(limit: ListLimit, offset: ListOffset, orderBy: ProjectOrder): [Project]
  tasks(done: Boolean, phaseId: ID, timeUnitId: ID, limit: ListLimit, offset: ListOffset, orderBy: TaskOrder): [Task]
  timeUnits(date: DateOnly, after: DateOnly, before: DateOnly, limit: ListLimit, offset: ListOffset, order: TimeUnitOrder): [TimeUnit]
  currentUser: User
}

type RemovePhasePayload {
  removedPhaseId: ID
}

type RemoveProjectPayload {
  removedProjectId: ID!
}

type RemoveTaskPayload {
  removedTaskId: ID
}

type RemoveTimeUnitPayload {
  removedTimeUnitId: ID
}

type Task {
  id: ID!
  owner: User!
  title: String!
  description: String
  done: Boolean!
  phase: Phase
  timeUnit: TimeUnit
  assignee: User
}

input TaskOrder {
  field: TaskOrderField!
  direction: OrderDirection!
}

enum TaskOrderField {
  TITLE
  PRIORITY
  CREATED_AT
  UPDATED_AT
}

type TimeUnit {
  id: ID!
  owner: User!
  description: String
  date: DateOnly!
  position: Int
  tasks: [Task]
}

input TimeUnitOrder {
  field: TimeUnitOrderField!
  direction: OrderDirection!
}

enum TimeUnitOrderField {
  DATE
  POSITION
}

type User {
  id: ID!
  email: String!
  password: String!
  nickname: String!
  firstName: String
  lastName: String
  projects: [Project]
}
