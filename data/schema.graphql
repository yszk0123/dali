input AddTimeUnitInput {
  title: String!
  clientMutationId: String
}

type AddTimeUnitPayload {
  timeUnitEdge: TimeUnitEdge
  viewer: User
  clientMutationId: String
}

type Mutation {
  addTimeUnit(input: AddTimeUnitInput!): AddTimeUnitPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Project {
  # The ID of an object
  id: ID!
  title: String
}

# A connection to a list of items.
type ProjectConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ProjectEdge]
}

# An edge in a connection.
type ProjectEdge {
  # The item at the end of the edge
  node: Project

  # A cursor for use in pagination
  cursor: String!
}

type Query {
  viewer: User

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type TimeUnit {
  # The ID of an object
  id: ID!
  title: String
}

# A connection to a list of items.
type TimeUnitConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TimeUnitEdge]
}

# An edge in a connection.
type TimeUnitEdge {
  # The item at the end of the edge
  node: TimeUnit

  # A cursor for use in pagination
  cursor: String!
}

type User implements Node {
  # The ID of an object
  id: ID!
  name: String
  projects(after: String, first: Int, before: String, last: Int): ProjectConnection
  timeUnits(after: String, first: Int, before: String, last: Int): TimeUnitConnection
}
