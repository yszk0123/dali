input AddTaskUnitInput {
  dailyScheduleId: ID!
  taskSetId: ID!
  timeUnitId: ID!
  clientMutationId: String
}

type AddTaskUnitPayload {
  taskUnitEdge: TimeUnitTaskUnitEdge
  viewer: User
  clientMutationId: String
}

input CreateDailyReportInput {
  clientMutationId: String
}

type CreateDailyReportPayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

input CreateDailyReportTemplateInput {
  clientMutationId: String
}

type CreateDailyReportTemplatePayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

input CreateProjectInput {
  title: String!
  clientMutationId: String
}

type CreateProjectPayload {
  projectEdge: UserProjectEdge
  viewer: User
  clientMutationId: String
}

input CreateTaskSetInput {
  title: String!
  clientMutationId: String
}

type CreateTaskSetPayload {
  taskSetEdge: UserTaskSetEdge
  viewer: User
  clientMutationId: String
}

input CreateTimeUnitInput {
  dailyScheduleId: ID!
  position: Int!
  clientMutationId: String
}

type CreateTimeUnitPayload {
  timeUnitEdge: DailyScheduleTimeUnitEdge
  viewer: User
  clientMutationId: String
}

type DailyReport {
  # The ID of an object
  id: ID!
  text: String
  createdAt: String!
  updatedAt: String!
  dailyScheduleId: Int
  userId: Int
}

type DailySchedule {
  # The ID of an object
  id: ID!
  date: String
  createdAt: String!
  updatedAt: String!
  userId: Int
  dailyReport: DailyReport
  timeUnits(after: String, first: Int, before: String, last: Int, orderBy: [DailyScheduleTimeUnitConnectionOrder]): DailyScheduleTimeUnitConnection
}

# A connection to a list of items.
type DailyScheduleTimeUnitConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [DailyScheduleTimeUnitEdge]
  total: Int
}

enum DailyScheduleTimeUnitConnectionOrder {
  ID
}

# An edge in a connection.
type DailyScheduleTimeUnitEdge {
  # The item at the end of the edge
  node: TimeUnit

  # A cursor for use in pagination
  cursor: String!
}

scalar Date

input LinkProjectInput {
  projectId: ID!
  taskSetId: ID!
  clientMutationId: String
}

type LinkProjectPayload {
  project: Project
  taskSet: TaskSet
  viewer: User
  clientMutationId: String
}

type Mutation {
  createDailyReport(input: CreateDailyReportInput!): CreateDailyReportPayload
  createDailyReportTemplate(input: CreateDailyReportTemplateInput!): CreateDailyReportTemplatePayload
  removeDailyReport(input: RemoveDailyReportInput!): RemoveDailyReportPayload
  removeDailyReportTemplate(input: RemoveDailyReportTemplateInput!): RemoveDailyReportTemplatePayload
  updateDailyReport(input: UpdateDailyReportInput!): UpdateDailyReportPayload
  updateDailyReportTemplate(input: UpdateDailyReportTemplateInput!): UpdateDailyReportTemplatePayload
  addTaskUnit(input: AddTaskUnitInput!): AddTaskUnitPayload
  createProject(input: CreateProjectInput!): CreateProjectPayload
  createTaskSet(input: CreateTaskSetInput!): CreateTaskSetPayload
  createTimeUnit(input: CreateTimeUnitInput!): CreateTimeUnitPayload
  linkProject(input: LinkProjectInput!): LinkProjectPayload
  removeProject(input: RemoveProjectInput!): RemoveProjectPayload
  removeTaskSet(input: RemoveTaskSetInput!): RemoveTaskSetPayload
  removeTaskUnit(input: RemoveTaskUnitInput!): RemoveTaskUnitPayload
  removeTimeUnit(input: RemoveTimeUnitInput!): RemoveTimeUnitPayload
  updateProject(input: UpdateProjectInput!): UpdateProjectPayload
  updateTaskSet(input: UpdateTaskSetInput!): UpdateTaskSetPayload
  updateTimeUnit(input: UpdateTimeUnitInput!): UpdateTimeUnitPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Project {
  # The ID of an object
  id: ID!
  title: String
  createdAt: String!
  updatedAt: String!
  userId: Int
}

type Query {
  viewer: User

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input RemoveDailyReportInput {
  clientMutationId: String
}

type RemoveDailyReportPayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

input RemoveDailyReportTemplateInput {
  clientMutationId: String
}

type RemoveDailyReportTemplatePayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

input RemoveProjectInput {
  id: ID!
  clientMutationId: String
}

type RemoveProjectPayload {
  deletedProjectId: ID
  viewer: User
  clientMutationId: String
}

input RemoveTaskSetInput {
  id: ID!
  clientMutationId: String
}

type RemoveTaskSetPayload {
  deletedTaskSetId: ID
  viewer: User
  clientMutationId: String
}

input RemoveTaskUnitInput {
  dailyScheduleId: ID!
  timeUnitId: ID!
  taskUnitId: ID!
  clientMutationId: String
}

type RemoveTaskUnitPayload {
  deletedTaskUnitId: ID
  viewer: User
  clientMutationId: String
}

input RemoveTimeUnitInput {
  dailyScheduleId: ID!
  timeUnitId: ID!
  clientMutationId: String
}

type RemoveTimeUnitPayload {
  deletedTimeUnitId: ID
  viewer: User
  clientMutationId: String
}

type TaskSet {
  # The ID of an object
  id: ID!
  title: String
  startAt: String
  endAt: String
  routine: taskSetroutineEnumType
  priority: taskSetpriorityEnumType
  createdAt: String!
  updatedAt: String!
  projectId: Int
  userId: Int
  project: Project
}

enum taskSetpriorityEnumType {
  EMERGENCY
  HIGH
  LOW
}

enum taskSetroutineEnumType {
  EVERYDAY
  WEEKDAY
  WEEKEND
}

type TaskUnit {
  # The ID of an object
  id: ID!
  done: Boolean
  createdAt: String!
  updatedAt: String!
  taskSetId: Int
  timeUnitId: Int
  taskSet: TaskSet
}

type TimeUnit {
  # The ID of an object
  id: ID!
  title: String
  position: Int
  createdAt: String!
  updatedAt: String!
  dailyScheduleId: Int
  userId: Int
  taskUnits(after: String, first: Int, before: String, last: Int, orderBy: [TimeUnitTaskUnitConnectionOrder]): TimeUnitTaskUnitConnection
}

# A connection to a list of items.
type TimeUnitTaskUnitConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TimeUnitTaskUnitEdge]
  total: Int
}

enum TimeUnitTaskUnitConnectionOrder {
  ID
}

# An edge in a connection.
type TimeUnitTaskUnitEdge {
  # The item at the end of the edge
  node: TaskUnit

  # A cursor for use in pagination
  cursor: String!
}

input UpdateDailyReportInput {
  clientMutationId: String
}

type UpdateDailyReportPayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

input UpdateDailyReportTemplateInput {
  clientMutationId: String
}

type UpdateDailyReportTemplatePayload {
  # The ID of an object
  id: ID!
  clientMutationId: String
}

input UpdateProjectInput {
  projectId: ID!
  title: String
  clientMutationId: String
}

type UpdateProjectPayload {
  project: Project
  viewer: User
  clientMutationId: String
}

input UpdateTaskSetInput {
  taskSetId: ID!
  title: String
  clientMutationId: String
}

type UpdateTaskSetPayload {
  taskSet: TaskSet
  viewer: User
  clientMutationId: String
}

input UpdateTimeUnitInput {
  dailyScheduleId: ID!
  timeUnitId: ID!
  title: String
  clientMutationId: String
}

type UpdateTimeUnitPayload {
  timeUnit: TimeUnit
  viewer: User
  clientMutationId: String
}

type User implements Node {
  # The ID of an object
  id: ID!
  name: String
  createdAt: String!
  updatedAt: String!
  projects(after: String, first: Int, before: String, last: Int, orderBy: [UserProjectConnectionOrder]): UserProjectConnection
  dailySchedule(date: Date): DailySchedule
  taskSets(after: String, first: Int, before: String, last: Int, orderBy: [UserTaskSetConnectionOrder], startAt: Date, endAt: Date, status: UserTaskSetStatus = TODO): UserTaskSetConnection
}

# A connection to a list of items.
type UserProjectConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserProjectEdge]
  total: Int
}

enum UserProjectConnectionOrder {
  ID
}

# An edge in a connection.
type UserProjectEdge {
  # The item at the end of the edge
  node: Project

  # A cursor for use in pagination
  cursor: String!
}

# A connection to a list of items.
type UserTaskSetConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserTaskSetEdge]
  total: Int
}

enum UserTaskSetConnectionOrder {
  ID
}

# An edge in a connection.
type UserTaskSetEdge {
  # The item at the end of the edge
  node: TaskSet

  # A cursor for use in pagination
  cursor: String!
}

enum UserTaskSetStatus {
  TODO
  DONE
}
